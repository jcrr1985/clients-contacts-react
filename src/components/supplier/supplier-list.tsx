import Drawer from '@mui/material/Drawer'
import Stack from '@mui/material/Stack'
import Box from '@mui/material/Box'
import List, { ListProps } from '@mui/material/List'
import ListItem from '@mui/material/ListItem'
import ListItemText from '@mui/material/ListItemText'
import ListItemButton from '@mui/material/ListItemButton'
import Divider from '@mui/material/Divider'
import IconButton from '@mui/material/IconButton'
import DeleteIcon from '@mui/icons-material/Delete'
import AddIcon from '@mui/icons-material/Add'
import { useTheme } from '@mui/material/styles'

import { Supplier } from '@/types'
import { nextSecuenceName } from '@/utils/name-secuence'
import useAppStore from '@/stores/app.store'
import useSupplierStore from '@/stores/supplier.store'
import { SIDEBAR_WIDTH, APPBAR_HEIGHT } from '@/constants'

interface SupplierListProps extends ListProps {
  suppliers: Supplier[]
}

export default (props: SupplierListProps) => {
  const { suppliers, ...restProps } = props
  const appStore = useAppStore()
  const supplierStore = useSupplierStore()
  const theme = useTheme()

  const handleAddSupplier = () =>
    supplierStore.create({
      _id: '', // an id will be generated by the server
      name: nextSecuenceName(
        supplierStore.suppliers.map((s) => s.name),
        'New Supplier ',
      ),
    })

  const handleRemoveSupplier = (supplierId: Supplier['_id']) =>
    supplierStore.remove(supplierId)

  const handleSelectSupplier = (supplier: Supplier) =>
    supplierStore.setCurrentSupplier(supplier)

  const supplierList = (
    <List dense={true} {...restProps}>
      <ListItem>
        <ListItemButton onClick={handleAddSupplier}>
          <Stack direction="row" alignItems="center">
            <AddIcon color="primary" fontSize="large" />
            <Box width={theme.spacing(1)} />
            <ListItemText primary="Zulieferer HinzufÃ¼guen" />
          </Stack>
        </ListItemButton>
      </ListItem>
      <Divider />
      {suppliers.map((supplier: Supplier) => (
        <Box key={supplier._id}>
          <ListItem
            secondaryAction={
              <IconButton
                edge="end"
                aria-label="delete"
                onClick={() => handleRemoveSupplier(supplier._id)}
              >
                <DeleteIcon />
              </IconButton>
            }
          >
            <ListItemButton
              selected={supplier._id === supplierStore.currentSupplier?._id}
              onClick={() => handleSelectSupplier(supplier)}
            >
              <ListItemText primary={supplier.name} />
            </ListItemButton>
          </ListItem>
          <Divider />
        </Box>
      ))}
    </List>
  )

  const commonDrawerSxProps = {
    flexBasis: SIDEBAR_WIDTH,
    '& .MuiDrawer-paper': {
      boxSizing: 'border-box',
      backgroundColor: theme.palette.grey[100],
      mt: { md: APPBAR_HEIGHT },
    },
  }

  return (
    <>
      <Drawer
        sx={{
          ...commonDrawerSxProps,
          '& .MuiDrawer-paper': {
            ...commonDrawerSxProps['& .MuiDrawer-paper'],
            width: '100%',
          },
          display: { md: 'none' },
        }}
        variant="temporary"
        onClose={() => appStore.setIsSidebarOpen(false)}
        open={appStore.isSidebarOpen}
      >
        {supplierList}
      </Drawer>
      <Drawer
        sx={{
          ...commonDrawerSxProps,
          mt: APPBAR_HEIGHT,
          display: { xs: 'none', md: 'block' },
        }}
        variant="permanent"
        open={true}
      >
        {supplierList}
      </Drawer>
    </>
  )
}
